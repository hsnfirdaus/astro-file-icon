---
import { colord, extend as extendColord } from "colord";
import namesPlugin from "colord/plugins/names";
import uniqueId from "lodash.uniqueid";
import Glyphs from "./Glyphs.astro";

extendColord([namesPlugin]);

// prettier-ignore
type IconType = "3d" | "acrobat" | "audio" | "binary" | "code" | "code2" | "compressed" | "document" | "drive" | "font" | "image" | "presentation" | "settings" | "spreadsheet" | "vector" | "video";

export interface BaseIconProps {
  /** Color of icon background */
  color?: string;
  /** Text to display in label */
  extension?: string;
  /** Displays the corner fold */
  fold?: boolean;
  /** Color of the corner fold */
  foldColor?: string;
  /** Color of file type icon */
  glyphColor?: string;
  /** Color of page gradient */
  gradientColor?: string;
  /** Opacity of page gradient */
  gradientOpacity?: number;
  /** Color of label */
  labelColor?: string;
  /** Color of label text */
  labelTextColor?: string;
  /** Displays the label in all caps */
  labelUppercase?: boolean;
  /** Corner radius of the file icon */
  radius?: number;
  /** Type of glyph icon to display */
  type?: IconType;
}

export type Props = Partial<BaseIconProps & astroHTML.JSX.SVGAttributes>;

const VIEWBOX = {
  WIDTH: 40,
  HEIGHT: 48,
};

const ICON = {
  WIDTH: VIEWBOX.WIDTH,
  HEIGHT: VIEWBOX.HEIGHT,
  X_OFFSET: 0,
};

const FOLD = {
  HEIGHT: 12,
};

const LABEL_HEIGHT = 14;

const {
  color = "whitesmoke",
  extension,
  fold = true,
  foldColor,
  glyphColor,
  gradientColor = "white",
  gradientOpacity = 0.25,
  labelColor,
  labelTextColor = "white",
  labelUppercase = false,
  radius = 4,
  type,
  ...rest
} = Astro.props;

const UNIQUE_ID = uniqueId();
---

<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox={`0 0 ${VIEWBOX.WIDTH} ${VIEWBOX.HEIGHT}`}
  {...rest}
>
  <defs>
    <clipPath id={`pageRadius${UNIQUE_ID}`}>
      <rect
        x={ICON.X_OFFSET}
        y="0"
        rx={radius}
        ry={radius}
        width={ICON.WIDTH}
        height={ICON.HEIGHT}></rect>
    </clipPath>

    <clipPath id="foldCrop">
      <rect
        width={ICON.WIDTH}
        height={FOLD.HEIGHT}
        transform={`rotate(-45 0 ${FOLD.HEIGHT})`}></rect>
    </clipPath>
    <linearGradient x1="100%" y1="0%" y2="100%" id={`pageGradient${UNIQUE_ID}`}>
      <stop
        stop-color={gradientColor}
        stop-opacity={gradientOpacity}
        offset="0%"></stop>
      <stop stop-color={gradientColor} stop-opacity="0" offset="66.67%"></stop>
    </linearGradient>
  </defs>

  <g id="file" clip-path={`url(#pageRadius${UNIQUE_ID})`}>
    {
      fold ? (
        <Fragment>
          <path
            d={`M${ICON.X_OFFSET} 0 h ${ICON.WIDTH - FOLD.HEIGHT} L ${
              ICON.WIDTH + ICON.X_OFFSET
            } ${FOLD.HEIGHT} v ${ICON.HEIGHT - FOLD.HEIGHT} H ${
              ICON.X_OFFSET
            } Z`}
            fill={color}
          />
          <path
            d={`M${ICON.X_OFFSET} 0 h ${ICON.WIDTH - FOLD.HEIGHT} L ${
              ICON.WIDTH + ICON.X_OFFSET
            } ${FOLD.HEIGHT} v ${ICON.HEIGHT - FOLD.HEIGHT} H ${
              ICON.X_OFFSET
            } Z`}
            fill={`url(#pageGradient${UNIQUE_ID})`}
          />
        </Fragment>
      ) : (
        <Fragment>
          <rect
            x={ICON.X_OFFSET}
            y="0"
            width={ICON.WIDTH}
            height={ICON.HEIGHT}
            fill={color}
          />
          <rect
            x={ICON.X_OFFSET}
            y="0"
            width={ICON.WIDTH}
            height={ICON.HEIGHT}
            fill={`url(#pageGradient${UNIQUE_ID})`}
          />
        </Fragment>
      )
    }
  </g>

  {
    fold && (
      <g transform={`translate(28 ${FOLD.HEIGHT}) rotate(-90)`}>
        <rect
          width={ICON.WIDTH}
          height={ICON.HEIGHT}
          fill={foldColor || colord(color).darken(0.1).toHex()}
          rx={radius}
          ry={radius}
          clip-path="url(#foldCrop)"
        />
      </g>
    )
  }

  {
    extension && (
      <Fragment>
        <g id="label">
          <rect
            fill={labelColor || colord(color).darken(0.3).toHex()}
            x={ICON.X_OFFSET}
            y={ICON.HEIGHT - LABEL_HEIGHT}
            width={ICON.WIDTH}
            height={LABEL_HEIGHT}
            clip-path={`url(#pageRadius${UNIQUE_ID})`}
          />
        </g>
        <g id="labelText" transform={`translate(${ICON.X_OFFSET} 34)`}>
          <text
            x={ICON.WIDTH / 2}
            y="10"
            font-family="-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif"
            font-size="9"
            fill={labelTextColor}
            text-anchor="middle"
            style={{
              fontWeight: "bold",
              textAlign: "center",
              pointerEvents: "none",
              textTransform: labelUppercase ? "uppercase" : "none",
              userSelect: "none",
            }}
          >
            {extension}
          </text>
        </g>
      </Fragment>
    )
  }

  {
    type && (
      <g
        transform={`translate(-4 ${!extension ? 6 : 0})`}
        fill={glyphColor || colord(color).darken(0.15).toHex()}
      >
        <Glyphs type={type} />
      </g>
    )
  }
</svg>
